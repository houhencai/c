//#include<iostream>
//using namespace std;
//
////默认情况下，c++编译器至少给一个类添加三个函数
////1.默认构造函数(无参，函数体为空)
////2.默认析构函数(无参，函数体为空)
////3.默认拷贝构造函数,对属性进行值拷贝
//
//
//class person
//{
//public:
//	//构造函数语法:类名(){}
//	//函数名称与类名相同
//	//构造函数可以有参数，因此可以发生重载
//	//程序在调用对象的时候会自动调用构造，无须手动调用，也只会调用一次
//	//作用:在创建对象的时候为对象的成员赋值，构造函数由编译器自动调用，无须手动调用
//	//构造函数按有无参数分为有参构造和无参构造
//	//构造函数可以分为普通构造和拷贝构造
//	
//	//person()//无参构造
//	//{
//	//	cout << "person构造函数的调用" << endl;
//	//}
//	
//
//	//person(int a)//有参构造
//	//{
//	//	age = a;
//	//	cout << "person有参构造函数" << endl;
//	//}
//
//
//	person(const person& p)//拷贝构造
//	{
//		age = p.age;
//		cout << "person拷贝构造函数" << endl;
//	}
//	//析构函数语法:~类名(){}
//	//函数名称与类名相同，但在前面需要加~
//	//析构函数是没有参数的，因此不能发生重构
//	//程序在调用对象的时候会自动调用构造，无须手动调用，也只会调用一次
//	//作用:在对象销毁前系统自动调用，执行一些清理工作
//	~person()
//	{
//		cout << "person 析构函数的调用" << endl;
//	}
//public:
//	int age;
//};
////构造函数和析构函数是必须有的，如果未定义，那编译器是自动创建
////void test01()
////{
////	//调用函数的方法
////	//1.括号法
////	person p;//无参构造函数的调用
////	person p1(10);//有参数函数的调用
////	person p2(p1);//拷贝构造函数的调用
////
////	//注意事项:
////	//person p(); 这会使编译器认为是函数的声明，而非是函数的调用
////
////	cout << "年龄: " << p1.age << endl;
////	cout << "年龄: " << p2.age << endl;
////
////	//2.显示法
////	person p1;
////	person p2 = person(10);//有参构造
////	person p3 = person(p2);//拷贝构造
////	person(10);//匿名对象 特点:当前执行结束后，系统会立即回收掉匿名对象
////	cout << "aaaa" << endl;//测试上面代码
////
////	//注意事项
////	//person(p3);
////	//编译器会将person(p3)；看作是person p3;，认为是函数的声明
////
////	//3.隐式构造法
////	person p1 = 10;//有参构造
////	person p2 = p1;//拷贝构造
////}
//
////拷贝构造函数的调用时机
////1.使用一个已经创建完毕的对象来初始化一个新的对象
//
////void test01()
////{
////	person p1(10);
////	person p2(p1);
////}
////2.值传递的方式给函数参数传参
////void towork(person p)
////{
////
////}
////void test02()
////{
////	person p;//对普通构造函数的调用
////	towork(p);//towork函数的形参是p的拷贝函数
////}
////3.以值方式返回局部对象
////person towork1()
////{
////	person p1;
////	cout << &p1 << endl;
////	return person (p1);//拷贝p1
////}
////void test03()
////{
////	person p=towork1();
////	cout << &p << endl;
////}
//
//
//
////注意:若用户定义有参构造函数，c++不再提供默认无参构造，但还是会提供拷贝构造
////void test04()
////{
////	//person p;//会报“person” : 没有合适的默认构造函数可用的错误
////
////	person p1(10);
////
////	person p2(p1);
////	cout << p2.age << endl;//但是有拷贝构造函数
////}
//
//
////若用户定义拷贝构造函数，c++不再提供默认普通构造
//void test05()
//{
//	//person p;//会报“person” : 没有合适的默认构造函数可用的错误
//	//person p1(10);//会报“person” : 没有合适的默认构造函数可用的错误
//	//person p2(p1);
//}
//int main()
//{
//	//test01();
//	//test02();
//	//test03();
//	//test04();
//	test05();
//	system("pause");
//	return 0;
//}