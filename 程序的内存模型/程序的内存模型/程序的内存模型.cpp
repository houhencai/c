#include <iostream>
using namespace std;

int* fund()
{
	int a = 10;//局部变量，存放在栈区，栈区的数据在函数执行完后自动释放
	return &a;//返回局部变量的地址
}
int* fand()
{
	//利用new关键字在堆区，可以将数据开辟到堆区
	int* a = new int(10);//10是在堆区创建的数据，让指针变量a来存放10的地址，所以10在程序结束前是不会消失的
	return a;
}
void test02()
{
	//利用new在堆区创建数组
	int* arr = new int[10];//表示数组有10个元素
	for (int i = 0; i < 10; i++)
	{
		arr[i] = i + 100;
	}
	for (int i = 0; i < 10; i++)
	{
		cout << arr[i] << endl;
	}
	//释放堆区数据的时候，要加[]才可以
	delete[] arr;
}
int main()
{
	//c++程序在执行的时候，将内存分为:
	//在程序编译后，生成了可执行化的exe程序，未执行前的两个区域:
	//	代码区:存放函数体的二进制代码，由操作系统进行管理的
	//		存放CPU执行的机器指令
	//			代码区是共享的，共享的目的是对于频繁执行的程序，只需要在内存中有一份代码即可
	//			代码区是只读的，使其只读的原因是防止程序意外地修改了他的指令
	//全局区:存放全局变量，静态变量和常量
	//	全局变量和静态变量存放在此
	//	全局区还包含常量区，字符串常量和其他常量也存放在此
	//	该区域的数据在程序结束后由操作系统释放
	//		在全局区中的有全局变量，静态变量(在普通变量前加static)，常量包括字符串常量(如"hello"),const修饰的全局变量
	//		不在全局区中的有局部变量和const修饰的局部变量
	//栈区:由编译器自动分配释放，存放函数的参数值、局部变量,形参等
	//		注意事项:不要返回局部变量的地址，栈区开辟的数据有编译器自动释放
	//int* p = fund();
	//cout << *p << endl;//第一次打印出正确的数字，因为编译器做了保留
	//cout << *p << endl;//第二次这个数据就不会保留了

	//堆区:由程序员来分配释放，若程序员不释放，程序结束时系统会自动回收
	//		在c++中主要利用new在堆区中开辟内存
	//int* p = fand();
	//cout << *p << endl;

	//new的基本语法
	//new返回的是该数据类型的指针
	//int* p = new int(10);
	//cout << *p << endl;
	//如果想释放到堆区，利用关键字 delete
	//delete p;
	//cout << *p << endl;

	//利用new在堆区创建数组
	test02();
	system("pause");
	return 0;
}